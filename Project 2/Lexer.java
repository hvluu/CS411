/* The following code was generated by JFlex 1.3.5 on 3/6/18 8:06 PM */

/*CS 411 Lexer*/

import java.util.ArrayList;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 3/6/18 8:06 PM from the specification file
 * <tt>file:/Users/hungluu/Downloads/SyntaxAnalyzer-master/toy.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\17\1\16\2\0\1\20\22\0\1\17\1\54\1\15\2\0"+
    "\1\50\2\0\1\57\1\60\1\22\1\11\1\56\1\12\1\13\1\21"+
    "\1\3\11\2\1\0\1\55\1\51\1\52\1\53\2\0\4\6\1\7"+
    "\1\6\21\1\1\5\2\1\1\61\1\0\1\62\1\0\1\14\1\0"+
    "\1\27\1\23\1\31\1\33\1\10\1\37\1\45\1\47\1\40\1\1"+
    "\1\30\1\25\1\41\1\36\1\24\1\42\1\1\1\26\1\32\1\35"+
    "\1\34\1\46\1\43\1\4\1\44\1\1\1\63\1\0\1\64\uff82\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    53,   106,   159,   212,   265,    53,    53,    53,   318, 
       53,   371,   424,   477,    53,   530,   583,   636,   689,   742, 
      795,   848,   901,   954,  1007,  1060,  1113,    53,  1166,  1219, 
     1272,  1325,    53,    53,    53,    53,    53,    53,    53,    53, 
     1378,  1431,  1484,  1537,  1590,   318,    53,  1643,  1696,  1749, 
     1802,  1855,  1908,  1961,  2014,  2067,  2120,  2173,  2226,  2279, 
      106,  2332,  2385,  2438,  2491,    53,    53,    53,    53,  2544, 
     2544,  1484,  2597,  2650,  2703,  2756,  2809,  2862,  2915,  2968, 
     3021,  3074,  3127,  3180,  3233,   106,  3286,  3339,  3392,  3445, 
     3498,  3551,  3604,   106,  3657,   106,  3710,  3763,  3816,  3869, 
     3922,  3975,   106,  4028,  4081,  4134,  4187,  4240,   106,  4293, 
      106,  4346,  4399,   106,  4452,  4505,  4558,  4611,  4664,  4717, 
      106,  4770,   106,   106,   106,   106,  4823,  4876,  4929,  4982, 
      106,  5035,  5088,  5141,   106,   106,  5194,  5247,   106,  5300, 
      106
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\2\1\3\1\4\1\5\4\3\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\2\3\1\21\2\3\1\22\1\23\1\24\1\3"+
    "\1\25\1\26\1\27\1\30\1\3\1\31\1\32\2\3"+
    "\1\33\1\3\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\66\0"+
    "\10\3\3\0\1\3\6\0\25\3\17\0\2\4\3\0"+
    "\2\51\2\0\1\52\53\0\2\4\2\53\1\0\2\51"+
    "\2\0\1\52\52\0\3\3\1\54\4\3\3\0\1\3"+
    "\6\0\2\3\1\55\22\3\15\0\15\56\1\57\1\0"+
    "\46\56\17\0\1\14\63\0\1\13\67\0\1\60\1\61"+
    "\43\0\10\3\3\0\1\3\6\0\1\3\1\62\1\3"+
    "\1\63\21\3\16\0\7\3\1\64\3\0\1\3\6\0"+
    "\25\3\16\0\10\3\3\0\1\3\6\0\2\3\1\65"+
    "\22\3\16\0\10\3\3\0\1\3\6\0\12\3\1\66"+
    "\12\3\16\0\10\3\3\0\1\3\6\0\1\3\1\67"+
    "\23\3\16\0\10\3\3\0\1\3\6\0\3\3\1\70"+
    "\21\3\16\0\7\3\1\71\3\0\1\3\6\0\25\3"+
    "\16\0\10\3\3\0\1\3\6\0\1\3\1\72\2\3"+
    "\1\73\20\3\16\0\10\3\3\0\1\3\6\0\13\3"+
    "\1\74\1\75\1\3\1\76\6\3\16\0\10\3\3\0"+
    "\1\3\6\0\3\3\1\77\21\3\16\0\10\3\3\0"+
    "\1\3\6\0\24\3\1\100\16\0\10\3\3\0\1\3"+
    "\6\0\1\3\1\101\23\3\67\0\1\102\64\0\1\103"+
    "\64\0\1\104\64\0\1\105\14\0\2\106\5\0\2\107"+
    "\54\0\2\52\3\0\2\51\56\0\2\110\2\0\3\110"+
    "\12\0\1\110\3\0\1\110\1\0\1\110\1\0\1\110"+
    "\3\0\1\110\26\0\10\3\3\0\1\3\6\0\12\3"+
    "\1\111\12\3\16\0\10\3\3\0\1\3\6\0\7\3"+
    "\1\112\15\3\15\0\16\60\1\13\1\60\1\15\44\60"+
    "\22\113\1\114\42\113\1\0\10\3\3\0\1\3\6\0"+
    "\1\3\1\115\23\3\16\0\7\3\1\116\3\0\1\3"+
    "\6\0\25\3\16\0\10\3\3\0\1\3\6\0\4\3"+
    "\1\117\5\3\1\120\12\3\16\0\10\3\3\0\1\3"+
    "\6\0\4\3\1\121\20\3\16\0\10\3\3\0\1\3"+
    "\6\0\3\3\1\122\21\3\16\0\10\3\3\0\1\3"+
    "\6\0\11\3\1\123\13\3\16\0\10\3\3\0\1\3"+
    "\6\0\11\3\1\124\13\3\16\0\10\3\3\0\1\3"+
    "\6\0\20\3\1\125\4\3\16\0\10\3\3\0\1\3"+
    "\6\0\3\3\1\126\21\3\16\0\10\3\3\0\1\3"+
    "\6\0\2\3\1\127\22\3\16\0\10\3\3\0\1\3"+
    "\6\0\12\3\1\130\12\3\16\0\10\3\3\0\1\3"+
    "\6\0\17\3\1\131\5\3\16\0\10\3\3\0\1\3"+
    "\6\0\15\3\1\132\7\3\16\0\10\3\3\0\1\3"+
    "\6\0\15\3\1\133\7\3\16\0\10\3\3\0\1\3"+
    "\6\0\15\3\1\134\7\3\17\0\2\106\62\0\7\3"+
    "\1\135\3\0\1\3\6\0\25\3\16\0\7\3\1\136"+
    "\3\0\1\3\6\0\25\3\15\0\22\113\1\137\42\113"+
    "\21\0\1\13\1\114\43\0\10\3\3\0\1\3\6\0"+
    "\2\3\1\140\22\3\16\0\10\3\3\0\1\3\6\0"+
    "\4\3\1\141\20\3\16\0\10\3\3\0\1\3\6\0"+
    "\10\3\1\142\14\3\16\0\10\3\3\0\1\3\6\0"+
    "\11\3\1\143\13\3\16\0\10\3\3\0\1\3\6\0"+
    "\7\3\1\144\15\3\16\0\10\3\3\0\1\3\6\0"+
    "\15\3\1\145\7\3\16\0\10\3\3\0\1\3\6\0"+
    "\1\146\24\3\16\0\7\3\1\147\3\0\1\3\6\0"+
    "\25\3\16\0\10\3\3\0\1\3\6\0\4\3\1\150"+
    "\20\3\16\0\10\3\3\0\1\3\6\0\7\3\1\124"+
    "\15\3\16\0\7\3\1\151\3\0\1\3\6\0\25\3"+
    "\16\0\10\3\3\0\1\3\6\0\2\3\1\152\22\3"+
    "\16\0\10\3\3\0\1\3\6\0\13\3\1\153\11\3"+
    "\16\0\10\3\3\0\1\3\6\0\2\3\1\154\22\3"+
    "\16\0\10\3\3\0\1\3\6\0\10\3\1\155\14\3"+
    "\16\0\10\3\3\0\1\3\6\0\13\3\1\156\11\3"+
    "\15\0\21\113\1\13\1\137\42\113\1\0\10\3\3\0"+
    "\1\3\6\0\5\3\1\157\17\3\16\0\10\3\3\0"+
    "\1\3\6\0\2\3\1\160\22\3\16\0\10\3\3\0"+
    "\1\3\6\0\3\3\1\161\21\3\16\0\10\3\3\0"+
    "\1\3\6\0\7\3\1\162\15\3\16\0\10\3\3\0"+
    "\1\3\6\0\13\3\1\163\11\3\16\0\10\3\3\0"+
    "\1\3\6\0\2\3\1\164\22\3\16\0\10\3\3\0"+
    "\1\3\6\0\3\3\1\165\21\3\16\0\10\3\3\0"+
    "\1\3\6\0\3\3\1\166\21\3\16\0\7\3\1\167"+
    "\3\0\1\3\6\0\25\3\16\0\10\3\3\0\1\3"+
    "\6\0\12\3\1\170\12\3\16\0\7\3\1\171\3\0"+
    "\1\3\6\0\25\3\16\0\10\3\3\0\1\3\6\0"+
    "\10\3\1\172\14\3\16\0\10\3\3\0\1\3\6\0"+
    "\13\3\1\173\11\3\16\0\10\3\3\0\1\3\6\0"+
    "\13\3\1\174\11\3\16\0\10\3\3\0\1\3\6\0"+
    "\22\3\1\175\2\3\16\0\7\3\1\176\3\0\1\3"+
    "\6\0\25\3\16\0\10\3\3\0\1\3\6\0\3\3"+
    "\1\177\21\3\16\0\10\3\3\0\1\3\6\0\14\3"+
    "\1\200\10\3\16\0\10\3\3\0\1\3\6\0\16\3"+
    "\1\201\6\3\16\0\10\3\3\0\1\3\6\0\2\3"+
    "\1\202\22\3\16\0\10\3\3\0\1\3\6\0\7\3"+
    "\1\203\15\3\16\0\10\3\3\0\1\3\6\0\4\3"+
    "\1\204\20\3\16\0\10\3\3\0\1\3\6\0\4\3"+
    "\1\205\20\3\16\0\7\3\1\206\3\0\1\3\6\0"+
    "\25\3\16\0\10\3\3\0\1\3\6\0\13\3\1\207"+
    "\11\3\16\0\10\3\3\0\1\3\6\0\21\3\1\210"+
    "\3\3\16\0\10\3\3\0\1\3\6\0\6\3\1\211"+
    "\16\3\16\0\10\3\3\0\1\3\6\0\13\3\1\212"+
    "\11\3\16\0\7\3\1\213\3\0\1\3\6\0\25\3"+
    "\16\0\10\3\3\0\1\3\6\0\12\3\1\214\12\3"+
    "\16\0\10\3\3\0\1\3\6\0\7\3\1\215\15\3"+
    "\15\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  9,  1,  1,  1,  1,  9,  9,  9,  1,  9,  1,  1,  1,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1, 
     9,  9,  9,  9,  9,  9,  9,  9,  0,  1,  0,  1,  1,  0,  9,  0, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  9,  9,  9,  1,  0,  1,  1,  1,  0,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */

    private Symbol symbol(int sym) {
        return new Symbol(sym, yyline+1, yycolumn+1);
    }

    public class symbol_table {
        public int [] control = new int[52];
        public ArrayList<Integer> next = new ArrayList<Integer>();
        public ArrayList<Character> symbol = new ArrayList<Character>();
        
        public symbol_table() {
            for (int i = 0; i < this.control.length; ++i) {
                this.control[i] = -1; 
            }
        }
    }

    public symbol_table s = new symbol_table();

  // Return array index of character
    public int alphaIndex(char c) {
        int v = c;
        if (v >= 97) {
            return v - 97 + 26;
        }
        return v - 65; 
    }

    public void trie(String str) {
        int value = alphaIndex(str.charAt(0));
        int ptr = s.control[value];

    if (ptr == -1) { // Undefined
        // point to last 
        s.control[value] = s.symbol.size();
        // add the rest of the characters
        for (int i = 1; i < str.length(); ++i) {
            s.symbol.add(str.charAt(i));
        }
        s.symbol.add('@'); 
    }
    else { // Defined
        
        int i = 1; // 2nd character, 'i' is the symbol counter
        boolean exit = false;

        if(str.length() == 1) {
            return;
        }

        while(!exit) {
            if (s.symbol.get(ptr) == str.charAt(i)) {
                // if endmarker
                if(str.length() -1 <= i) {
                    exit = true;
                    break; 
                }
                i++; 
                ptr++;
            }
            else if((s.next.size() > ptr) && (s.next.get(ptr) != -1)) {
                ptr = s.next.get(ptr);
            }
            else {

                while(s.next.size() <= ptr) {
                    s.next.add(-1);
                } // grow the (next) array

                // Set next available which will 
                // always be size() (dynamically allocated)
                s.next.set(ptr,s.symbol.size()); 

                while(i < str.length()) {
                    s.symbol.add(str.charAt(i++));
                }
                s.symbol.add('@');

                exit = true;
                break;
            }
        }


    }

}

public void printControl(int head, int tail) {
    System.out.printf("%-10s", "switch:");
    int v = 0;
    for (; head < tail; ++head) {
        v = s.control[head];
        if (v == -1) {
            System.out.print("$   ");
        }
        else {
            System.out.printf("%-3d ", v);
        }
    }
    System.out.println("\n");
}

public void printSymbol(int head, int tail) {
    System.out.printf("%-10s", "symbol:");
    for(int i = head; i < tail; ++i) {
        System.out.printf("%c   ", s.symbol.get(i));
    }
    System.out.println();
}

public void printNext(int head, int tail) {
    System.out.printf("%-10s", "next:");
    int v = 0;
    for (int i = head; i < tail; ++i) {
        v = s.next.get(i);
        if (v == -1) {
            System.out.print("$   ");
        }
        else {
            System.out.printf("%-3d ", v);
        }
    }
    System.out.println("\n");       

}

private void equalizeNext() {
    if (s.symbol.size() > s.next.size()) {
        while (s.next.size() != s.symbol.size()) {
            s.next.add(-1);
        }
    }
}

public void printTable() {
    String alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    System.out.printf("%-10s","");
    int head = 0;
    int i = 0;
    for (; i < 52; ++i) {
        if ((i+1)%20 == 0) {
            System.out.println();
            printControl(head,i);
            System.out.printf("%-10s","");
            head = i;
        }
        System.out.printf("%c   ", alpha.charAt(i));
    }
    System.out.println();
    printControl(head,i);

    equalizeNext();

    i = 0;
    head  = 0;
    System.out.printf("%-10s",""); 
    for (; i < s.symbol.size(); ++i) {
        if ((i+1)%20 == 0) {
            System.out.println();
            printSymbol(head,i);
            printNext(head,i);
            System.out.printf("%-10s","");
            head = i;
        }
        System.out.printf("%-3d ", i);
    }
    System.out.println();
    printSymbol(head,i);
    printNext(head,i);
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[5353];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 140) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException, java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 10: 
        case 12: 
          {   }
        case 142: break;
        case 11: 
          {   }
        case 143: break;
        case 37: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_rightbracket); }
        case 144: break;
        case 67: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_greaterequal); }
        case 145: break;
        case 102: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_boolconstant); }
        case 146: break;
        case 46: 
          { return symbol(sym.t_stringconstant); }
        case 147: break;
        case 140: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_implements); }
        case 148: break;
        case 138: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_interface); }
        case 149: break;
        case 135: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_newarray); }
        case 150: break;
        case 34: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_leftparen); }
        case 151: break;
        case 32: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_semicolon); }
        case 152: break;
        case 29: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_assignop); }
        case 153: break;
        case 13: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_division); }
        case 154: break;
        case 3: 
        case 4: 
        case 71: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_intconstant); }
        case 155: break;
        case 35: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_rightparen); }
        case 156: break;
        case 36: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_leftbracket); }
        case 157: break;
        case 38: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_leftbrace); }
        case 158: break;
        case 39: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_rightbrace); }
        case 159: break;
        case 65: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_lessequal); }
        case 160: break;
        case 68: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_notequal); }
        case 161: break;
        case 134: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_println); }
        case 162: break;
        case 130: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_extends); }
        case 163: break;
        case 125: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_double); }
        case 164: break;
        case 124: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_string); }
        case 165: break;
        case 123: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_return); }
        case 166: break;
        case 122: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_readln); }
        case 167: break;
        case 30: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_greater); }
        case 168: break;
        case 8: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_period); }
        case 169: break;
        case 27: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_mod); }
        case 170: break;
        case 1: 
        case 9: 
        case 31: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.error); }
        case 171: break;
        case 60: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_if); }
        case 172: break;
        case 85: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_for); }
        case 173: break;
        case 87: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_int); }
        case 174: break;
        case 120: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_while); }
        case 175: break;
        case 113: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_class); }
        case 176: break;
        case 110: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_break); }
        case 177: break;
        case 33: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_comma); }
        case 178: break;
        case 28: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_less); }
        case 179: break;
        case 6: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_plus); }
        case 180: break;
        case 7: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_minus); }
        case 181: break;
        case 66: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_equal); }
        case 182: break;
        case 93: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_else); }
        case 183: break;
        case 95: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_bool); }
        case 184: break;
        case 108: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_void); }
        case 185: break;
        case 14: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_multiplication); }
        case 186: break;
        case 2: 
        case 5: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 43: 
        case 44: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 72: 
        case 73: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 86: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 109: 
        case 111: 
        case 112: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 121: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 131: 
        case 132: 
        case 133: 
        case 136: 
        case 137: 
        case 139: 
          { System.out.printf("%n%s ",yytext());trie(yytext());return symbol(sym.t_id); }
        case 187: break;
        case 41: 
        case 69: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_doubleconstant); }
        case 188: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return symbol(sym.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
